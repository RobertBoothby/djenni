package com.robertboothby.djenni.core;

import java.util.function.Supplier;

/**
 * This allows you to "renew" an underlying Supplier on demand. This is accomplished by calling get() on a Supplier of
 * Suppliers.
 * @param <T> The type being generated by the supplier.
 */
public class RenewableSupplier<T> implements StreamableSupplier<T> {

    private final Supplier<Supplier<T>> supplierSupplier;
    private Supplier<T> currentSupplier;

    @SuppressWarnings("unchecked")
    public RenewableSupplier(Supplier<? extends Supplier<? extends T>> supplierSupplier) {
        this.supplierSupplier = (Supplier<Supplier<T>>) supplierSupplier;
        renew();
    }

    @Override
    public T get() {
        return currentSupplier.get();
    }

    public void renew(){
        this.currentSupplier = supplierSupplier.get();
    }

    public static <T> RenewableSupplier<T> renewable(Supplier< ? extends Supplier<? extends T>> supplierSupplier ) {
        return new RenewableSupplier<T>(supplierSupplier);
    }
}
