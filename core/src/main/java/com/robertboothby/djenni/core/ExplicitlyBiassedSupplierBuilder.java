package com.robertboothby.djenni.core;

import com.robertboothby.djenni.SupplierBuilder;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Supplier;

/**
 * This builder allows for the configuration of ExplicitlyBiasedSupplier instances.
 */
public class ExplicitlyBiassedSupplierBuilder<T> implements SupplierBuilder<T> {

    /**
     * A default weight of 1.0D.
     */
    public static final Double DEFAULT_WEIGHT = 1.0D;

    private List<ExplicitlyBiasedSupplier.BiasDetail<T>> biaslist = new ArrayList<>();

    /**
     * Add (or update) a value with the {@link #DEFAULT_WEIGHT}.
     * @param value The value to add.
     * @return the builder for further configuration.
     */
    public ExplicitlyBiassedSupplierBuilder<T> addValue(T value) {
        biaslist.add(ExplicitlyBiasedSupplier.biasDetail(value, DEFAULT_WEIGHT));
        return this;
    }

    /**
     * Add (or update) a value with the passed in weight.
     * @param value The value to add.
     * @param weight the weight of the value being added.
     * @return the builder for further configuration.
     */
    public ExplicitlyBiassedSupplierBuilder<T> addValue(T value, double weight) {
        biaslist.add(ExplicitlyBiasedSupplier.biasDetail(value, weight));
        return this;
    }

    /**
     * Add (or update) multiple values with the {@link #DEFAULT_WEIGHT}.
     * @param values the values to add.
     * @return the builder for further configuration.
     */
    public ExplicitlyBiassedSupplierBuilder<T> addValues(T ... values) {
        for (T value : values){
            biaslist.add(ExplicitlyBiasedSupplier.biasDetail(value, DEFAULT_WEIGHT));
        }
        return this;
    }

    /**
     * Add (or update) multiple values with the passed in weight.
     * @param values the values to add.
     * @param weight the weight of the values being added.
     * @return the builder for further configuration.
     */
    public ExplicitlyBiassedSupplierBuilder<T> addValues(double weight, T ... values) {
        for (T value : values){
            biaslist.add(ExplicitlyBiasedSupplier.biasDetail(value, weight));
        }
        return this;
    }

    @Override
    public StreamableSupplier<T> build() {
        return new ExplicitlyBiasedSupplier<T>(biaslist);
    }

    /**
     * Get a new instance of the builder to be configured.
     * @param <T> The type of object that will be generated by the configured generators.
     * @return a new instance of the builder.
     */
    public static <T> ExplicitlyBiassedSupplierBuilder<T> explicitlyBiassedGeneratorFor(Class<T> classType) {
        return new ExplicitlyBiassedSupplierBuilder<T>();
    }
}
