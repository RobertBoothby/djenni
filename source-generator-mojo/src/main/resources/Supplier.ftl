<#import "GenericTypeParameters.ftl" as g/>
<#if javaSource.packageName?has_content>package ${javaSource.packageName};
<#--TODO Make this support generic types properly and subclasses of the various parameters e.g. use ? extends List not just List.-->

</#if>
import java.util.function.Supplier;
import java.util.Optional;
import org.hamcrest.Description;

import static java.util.Optional.ofNullable;

/**
 * <p>
 *     This class is intended to be used to supply instances of ${javaClass.name}. It is intended to be used with
 * {@link ${javaClass.name}SupplierBuilder} which provides a fluent interface for configuring and instantiating it.
 * </p>
 * <p>
 *    <em>
 *        This class has been autogenerated by the Djenni code generation framework and as such should never be checked
 *        in or edited.
 *    </em>
 * </p>
 */
public class ${javaClass.name}Supplier implements Supplier<${javaClass.name}> {
<#if constructor.parameters?has_content>

    //Constructor parameter suppliers.
</#if>
<#list constructor.parameters as constructorParameter>
    protected final Supplier<${constructorParameter.type.genericFullyQualifiedName}> ${constructorParameter.name}ConstructorSupplier;
</#list>
<#if setterMethods?has_content>

    //Setter method suppliers.
</#if>
<#list setterMethods as setterMethod>
    protected final Supplier<${setterMethod.propertyType.genericFullyQualifiedName}> ${setterMethod.propertyName}SetterSupplier;

</#list>
<#if collectionGetters?has_content>

    //Collection getter method suppliers.
</#if>
<#list collectionGetters as collectionGetter>
    protected final Supplier<${collectionGetter.propertyType.genericFullyQualifiedName}> ${collectionGetter.propertyName}CollectionSupplier;
</#list>

    //Constructor
    public ${javaClass.name}Supplier (<#list constructor.parameters as constructorParameter>
            Supplier<${constructorParameter.type.genericFullyQualifiedName}> ${constructorParameter.name}ConstructorSupplier<#sep>,</#sep></#list><#if setterMethods?has_content || collectionGetters?has_content>,</#if>
<#list setterMethods as setterMethod>
            Supplier<${setterMethod.propertyType.genericFullyQualifiedName}> ${setterMethod.propertyName}SetterSupplier<#sep>,</#sep></#list><#if collectionGetters?has_content>,</#if>
<#list collectionGetters as collectionGetter>
            Supplier<${collectionGetter.propertyType.genericFullyQualifiedName}> ${collectionGetter.propertyName}CollectionSupplier<#sep>,</#sep></#list>
    ) {
<#list constructor.parameters as constructorParameter>
        this.${constructorParameter.name}ConstructorSupplier = ${constructorParameter.name}ConstructorSupplier;
</#list>
<#list setterMethods as setterMethod>
        this.${setterMethod.propertyName}SetterSupplier = ${setterMethod.propertyName}SetterSupplier;
</#list>
<#list collectionGetters as collectionGetter>
        this.${collectionGetter.propertyName}CollectionSupplier = ${collectionGetter.propertyName}CollectionSupplier;
</#list>
    }

    public ${javaClass.name} get() {
<#if !constructor.parameters?has_content>
        ${javaClass.name} new${javaClass.name} = new ${javaClass.name}();
    <#else>
        ${javaClass.name} new${javaClass.name} = new ${javaClass.name}(
<#list constructor.parameters as constructorParameter>
                ${constructorParameter.name}ConstructorSupplier.get()<#sep>,</#sep>
</#list>
        );
</#if>

<#list setterMethods as setterMethod>
        new${javaClass.name}.${setterMethod.name}(${setterMethod.propertyName}SetterSupplier.get());
</#list>

<#list collectionGetters as collectionGetter>
        new${javaClass.name}.${collectionGetter.name}().addAll(${collectionGetter.propertyName}CollectionSupplier.get());
</#list>

        return new${javaClass.name};
    }
}