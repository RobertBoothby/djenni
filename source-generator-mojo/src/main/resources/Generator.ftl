<#import "GenericTypeParameters.ftl" as g/>
<#if javaSource.packageName?has_content>package ${javaSource.packageName};

</#if>
import com.robertboothby.djenni.Generator;
import java.util.Optional;
import org.hamcrest.Description;

import static java.util.Optional.ofNullable;

/**
 * <p>
 *     This class is intended to be used to generate instances of ${javaClass.name}. It is intended to be used with concrete
 *     implementations of {@link Abstract${javaClass.name}GeneratorBuilder.
 * </p>
 * <p>
 *    <em>
 *        This class has been autogenerated by the Djenni code generation framework and as such should never be checked
 *        in or edited.
 *    </em>
 * </p>
 */
public class ${javaClass.name}Generator implements Generator<${javaClass.name}> {
<#if constructor.parameters?has_content>

    //Constructor parameter generators.
</#if>
<#list constructor.parameters as constructorParameter>
    protected final Generator<${constructorParameter.type.genericFullyQualifiedName}> ${constructorParameter.name}ConstructorGenerator;
</#list>
<#if setterMethods?has_content>

    //Setter method generators.
</#if>
<#list setterMethods as setterMethod>
    protected final Generator<${setterMethod.propertyType.genericFullyQualifiedName}> ${setterMethod.propertyName}SetterGenerator;

</#list>
<#if collectionGetters?has_content>

    //Collection getter method generators.
</#if>
<#list collectionGetters as collectionGetter>
    protected final Generator<${collectionGetter.propertyType.genericFullyQualifiedName}> ${collectionGetter.propertyName}CollectionGenerator;
</#list>

    //Constructor
    public ${javaClass.name}Generator (<#list constructor.parameters as constructorParameter>
            Generator<${constructorParameter.type.genericFullyQualifiedName}> ${constructorParameter.name}ConstructorGenerator<#sep>,</#sep></#list><#if setterMethods?has_content || collectionGetters?has_content>,</#if>
<#list setterMethods as setterMethod>
            Generator<${setterMethod.propertyType.genericFullyQualifiedName}> ${setterMethod.propertyName}SetterGenerator<#sep>,</#sep></#list><#if collectionGetters?has_content>,</#if>
<#list collectionGetters as collectionGetter>
            Generator<${collectionGetter.propertyType.genericFullyQualifiedName}> ${collectionGetter.propertyName}CollectionGenerator<#sep>,</#sep></#list>
    ) {
<#list constructor.parameters as constructorParameter>
        this.${constructorParameter.name}ConstructorGenerator = ${constructorParameter.name}ConstructorGenerator;
</#list>
<#list setterMethods as setterMethod>
        this.${setterMethod.propertyName}SetterGenerator = ${setterMethod.propertyName}SetterGenerator;
</#list>
<#list collectionGetters as collectionGetter>
        this.${collectionGetter.propertyName}CollectionGenerator = ${collectionGetter.propertyName}CollectionGenerator;
</#list>
    }

    public ${javaClass.name} generate() {
<#if !constructor.parameters?has_content>
        ${javaClass.name} generated${javaClass.name} = new ${javaClass.name}();
    <#else>
        ${javaClass.name} generated${javaClass.name} = new ${javaClass.name}(
<#list constructor.parameters as constructorParameter>
                ${constructorParameter.name}ConstructorGenerator.generate()<#sep>,</#sep>
</#list>
        );
</#if>

<#list setterMethods as setterMethod>
        generated${javaClass.name}.${setterMethod.name}(${setterMethod.propertyName}SetterGenerator.generate());
</#list>

<#list collectionGetters as collectionGetter>
        generated${javaClass.name}.${collectionGetter.name}().addAll(${collectionGetter.propertyName}CollectionGenerator.generate());
</#list>

        return generated${javaClass.name};
    }

    public void describeTo(Description description) {
        description.appendText("{  ${javaClass.name}Generator ");

<#if constructor.parameters?has_content>
        description.appendText("Constructor Generators : { ");
<#list constructor.parameters as constructorParameter>
        description.appendText("${constructorParameter.name}ConstructorGenerator : ");
        ${constructorParameter.name}ConstructorGenerator.describeTo(description);
<#sep>
        description.appendText(", ");
</#list>
        description.appendText("} ");
</#if>

<#if setterMethods?has_content>
        description.appendText("Setter Generators : { ");
<#list setterMethods as setterMethod>
        description.appendText("${setterMethod.propertyName}SetterGenerator : ");
        ${setterMethod.propertyName}SetterGenerator.describeTo(description);
    <#sep>
        description.appendText(", ");
</#list>
        description.appendText("} ");
</#if>

<#if collectionGetters?has_content>
        description.appendText("Collection Generators : { ");
    <#list collectionGetters as collectionGetter>
        description.appendText("${collectionGetter.propertyName}CollectiorGenerator : ");
        ${collectionGetter.propertyName}CollectionGenerator.describeTo(description);
<#sep>
        description.appendText(", ");
</#list>
        description.appendText("} ");
</#if>

        description.appendText("}");
    }
}