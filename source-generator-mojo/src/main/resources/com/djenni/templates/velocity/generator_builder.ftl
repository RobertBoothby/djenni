package ${class.package.name};

import com.robertboothby.djenni.Generator;
import com.robertboothby.djenni.GeneratorBuilder;
import com.robertboothby.djenni.util.Nullable;

import static com.robertboothby.djenni.util.Nullable.nullable;

/**
 * <p>
 * Concrete implementations of this class must be created that provide reasonable default Generators and provide the
 * builder methods for overriding them.
 * </p>
 * <p>
 *    <em>
 *        This class has been autogenerated by the Djenni code generation framework and as such should never be checked
 *        in or edited.
 *    </em>
 * </p>
 */
public abstract class Abstract${class.name}GeneratorBuilder implements GeneratorBuilder<${class.name}> {
#if(${constructor.parameters.isEmpty()} == false)

    //Constructor parameter generators.
#end
#foreach(${constructorParameter} in ${constructor.parameters})
    protected Generator<${constructorParameter.type.genericValue.replace('$', '.')}> ${constructorParameter.name}ConstructorGenerator;
#end
#if(${setterMethods.isEmpty()} == false)

    //Setter method generators.
#end
#foreach(${setterMethod} in ${setterMethods})
    protected Nullable<Generator<${setterMethod.propertyType.genericValue.replace('$', '.')}>> ${setterMethod.propertyName}SetterGenerator = nullable(null);
#end
#if(${collectionGetters.isEmpty()} == false)

    //Collection getter method generators.
#end
#foreach(${collectionGetter} in ${collectionGetters})
    protected Nullable<Generator<${collectionGetter.propertyType.genericValue.replace('$', '.')}>> ${collectionGetter.propertyName}CollectionGenerator = nullable(null);
#end

    public Abstract${class.name}GeneratorBuilder() {
        setupDefaults();
    }

    public Generator<${class.name}> build() {
        return new ${class.name}Generator(
#foreach(${constructorParameter} in ${constructor.parameters})
            ${constructorParameter.name}ConstructorGenerator#if(${velocityCount} != ${constructor.parameters.size()}
            ||  !${setterMethods.isEmpty()} || !${collectionGetters.isEmpty()}),#else);#end

#end
#foreach(${setterMethod} in ${setterMethods})
            ${setterMethod.propertyName}SetterGenerator#if(${velocityCount} != ${setterMethods.size()}
            || !${collectionGetters.isEmpty()}),#else);#end

#end
#foreach(${collectionGetter} in ${collectionGetters})
            ${collectionGetter.propertyName}CollectionGenerator#if(${velocityCount} != ${collectionGetters.size()}),#else);#end

#end
    }

    /**
     * Implement this method to provide reasonable defaults for all the generators in concrete implementations of this
     * class.
     */
    public abstract void setupDefaults();

}