<#if javaSource.packageName?has_content>package ${javaSource.packageName};

</#if>
import com.robertboothby.djenni.Generator;
import com.robertboothby.djenni.GeneratorBuilder;
import java.util.Optional;

import static java.util.Optional.ofNullable;

/**
 * <p>
 * Concrete implementations of this class must be created that provide reasonable default Generators and provide the
 * builder methods for overriding them.
 * </p>
 * <p>
 *    <em>
 *        This class has been autogenerated by the Djenni code generation framework and as such should never be checked
 *        in or edited.
 *    </em>
 * </p>
 */
public abstract class ${javaClass.name}GeneratorBuilder implements GeneratorBuilder<${javaClass.name}> {
<#if constructor.parameters?has_content>

    //Constructor parameter generators.
<#list constructor.parameters as constructorParameter>
    protected Generator<${constructorParameter.type.genericFullyQualifiedName}> ${constructorParameter.name}ConstructorGenerator;
</#list>
</#if>
<#if setterMethods?has_content>

    //Setter method generators.
<#list setterMethods as setterMethod>
    protected Generator<${setterMethod.propertyType.genericFullyQualifiedName}> ${setterMethod.propertyName}SetterGenerator;
</#list>
</#if>
<#if collectionGetters?has_content>

    //Collection getter method generators.
<#list collectionGetters as collectionGetter>
    protected Generator<${collectionGetter.propertyType.genericFullyQualifiedName}> ${collectionGetter.propertyName}CollectionGenerator;
</#list>
</#if>

    <#--public Abstract${class.name}GeneratorBuilder() {-->
        <#--setupDefaults();-->
    <#--}-->

    <#--public Generator<${class.name}> build() {-->
        <#--return new ${class.name}Generator(-->
<#--#foreach(${constructorParameter} in ${constructor.parameters})-->
            <#--${constructorParameter.name}ConstructorGenerator#if(${velocityCount} != ${constructor.parameters.size()}-->
            <#--||  !${setterMethods.isEmpty()} || !${collectionGetters.isEmpty()}),#else);#end-->

<#--#end-->
<#--#foreach(${setterMethod} in ${setterMethods})-->
            <#--${setterMethod.propertyName}SetterGenerator#if(${velocityCount} != ${setterMethods.size()}-->
            <#--|| !${collectionGetters.isEmpty()}),#else);#end-->

<#--#end-->
<#--#foreach(${collectionGetter} in ${collectionGetters})-->
            <#--${collectionGetter.propertyName}CollectionGenerator#if(${velocityCount} != ${collectionGetters.size()}),#else);#end-->

<#--#end-->
    <#--}-->

    <#--/**-->
     <#--* Implement this method to provide reasonable defaults for all the generators in concrete implementations of this-->
     <#--* class.-->
     <#--*/-->
    <#--public abstract void setupDefaults();-->

}